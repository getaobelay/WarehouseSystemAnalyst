@typeparam TItem

<table class="table table-responsive-lg">
    <thead class="thead-light">
        <tr>
            @TableHeader
        </tr>
    </thead>

    <tbody>
        @if (Items == null || Items.Count <= 0)
        {
            <p>Loading....</p>
        }
        else
        {
            @foreach (var item in Items)
            {
                <tr>
                    <td><input type="checkbox" @onchange="(await)=>OnSelectedCheckBox(GetId(item))" /></td>
                    @RowTamplate(item)
                </tr>
            }
        }
    </tbody>
</table>
@code {

    [Parameter] public RenderFragment TableHeader { get; set; }
    [Parameter] public RenderFragment<TItem> RowTamplate { get; set; }
    [Parameter] public IReadOnlyList<TItem> Items { get; set; }
    [Parameter] public EventCallback<string> SetSelectedItem { get; set; }

    private async Task OnSelectedCheckBox(string Id)
    {
        await SetSelectedItem.InvokeAsync(Id);
    }


    protected override void OnInitialized()
    {
        Items = new List<TItem>();
        base.OnInitialized();
    }

    private string GetId(TItem item)
    {
        return item.GetType().GetProperty("PK").GetValue(item, null).ToString();
    }
}
