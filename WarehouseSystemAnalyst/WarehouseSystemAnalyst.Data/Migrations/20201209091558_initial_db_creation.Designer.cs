// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WarehouseSystemAnalyst.Data.DataContext;

namespace WarehouseSystemAnalyst.Data.Migrations
{
    [DbContext(typeof(WarehouseDbContext))]
    [Migration("20201209091558_initial_db_creation")]
    partial class initial_db_creation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("AllocationWarehouseLocation", b =>
                {
                    b.Property<int>("AllocationWarehousesId")
                        .HasColumnType("int");

                    b.Property<int>("LocationsId")
                        .HasColumnType("int");

                    b.HasKey("AllocationWarehousesId", "LocationsId");

                    b.HasIndex("LocationsId");

                    b.ToTable("AllocationWarehouseLocation");
                });

            modelBuilder.Entity("GoodsWarehouseLocation", b =>
                {
                    b.Property<int>("GoodsWarehousesId")
                        .HasColumnType("int");

                    b.Property<int>("LocationsId")
                        .HasColumnType("int");

                    b.HasKey("GoodsWarehousesId", "LocationsId");

                    b.HasIndex("LocationsId");

                    b.ToTable("GoodsWarehouseLocation");
                });

            modelBuilder.Entity("LocationShippingWarehouse", b =>
                {
                    b.Property<int>("LocationsId")
                        .HasColumnType("int");

                    b.Property<int>("ShippingWarehousesId")
                        .HasColumnType("int");

                    b.HasKey("LocationsId", "ShippingWarehousesId");

                    b.HasIndex("ShippingWarehousesId");

                    b.ToTable("LocationShippingWarehouse");
                });

            modelBuilder.Entity("MesureProductItem", b =>
                {
                    b.Property<int>("ProductItemsId")
                        .HasColumnType("int");

                    b.Property<int>("UnitOfMesureId")
                        .HasColumnType("int");

                    b.HasKey("ProductItemsId", "UnitOfMesureId");

                    b.HasIndex("UnitOfMesureId");

                    b.ToTable("MesureProductItem");
                });

            modelBuilder.Entity("OrderOrderPallet", b =>
                {
                    b.Property<int>("OrderPalletsId")
                        .HasColumnType("int");

                    b.Property<int>("OrdersId")
                        .HasColumnType("int");

                    b.HasKey("OrderPalletsId", "OrdersId");

                    b.HasIndex("OrdersId");

                    b.ToTable("OrderOrderPallet");
                });

            modelBuilder.Entity("ProductProductItem", b =>
                {
                    b.Property<int>("ProductItemsId")
                        .HasColumnType("int");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.HasKey("ProductItemsId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("ProductProductItem");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.ContactEntities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PK")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WarehouseItemId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.Enrollment.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("KeyValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Audits");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.MissionEntites.CollectItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AssignedTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PK")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CollectItems");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.MissionEntites.CollectProductItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AssignedTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PK")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CollectProductItems");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.MissionEntites.CollectProducts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AssignedTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PK")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CollectProducts");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.PalletEntities.OrderPallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PK")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PalletCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PalletNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierPallet")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrderPallet");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.PalletEntities.ProductPallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BatchId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PK")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PalletCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PalletNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SupplierPallet")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BatchId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPallets");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.ProductEntities.Batch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("AllocationWarehouseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("GoodsWarehouseId")
                        .HasColumnType("int");

                    b.Property<string>("InventoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PK")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PalletId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductSupplierId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ShippingWarehouseId")
                        .HasColumnType("int");

                    b.Property<string>("StockId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WarehouseItemId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AllocationWarehouseId");

                    b.HasIndex("GoodsWarehouseId");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasFilter("[Id] IS NOT NULL");

                    b.HasIndex("InventoryId");

                    b.HasIndex("PK")
                        .IsUnique()
                        .HasFilter("[PK] IS NOT NULL");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductItemId");

                    b.HasIndex("ShippingWarehouseId");

                    b.HasIndex("StockId");

                    b.ToTable("Batches");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.ProductEntities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PK")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubCategoryId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasFilter("[Id] IS NOT NULL");

                    b.HasIndex("PK")
                        .IsUnique()
                        .HasFilter("[PK] IS NOT NULL");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.ProductEntities.Mesure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PK")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductItemId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductMesureId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasFilter("[Id] IS NOT NULL");

                    b.HasIndex("PK")
                        .IsUnique()
                        .HasFilter("[PK] IS NOT NULL");

                    b.ToTable("Mesures");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.ProductEntities.Package", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PK")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductPackageId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasFilter("[Id] IS NOT NULL");

                    b.HasIndex("PK")
                        .IsUnique()
                        .HasFilter("[PK] IS NOT NULL");

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.ProductEntities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("AllocationWarehouseId")
                        .HasColumnType("int");

                    b.Property<string>("BatchId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CollectProductsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("GoodsWarehouseId")
                        .HasColumnType("int");

                    b.Property<string>("InventoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MesureId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PK")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PalletId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductItemId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductPackageId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductVendorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ShippingWarehouseId")
                        .HasColumnType("int");

                    b.Property<string>("StockId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WarehouseItemId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AllocationWarehouseId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CollectProductsId");

                    b.HasIndex("GoodsWarehouseId");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasFilter("[Id] IS NOT NULL");

                    b.HasIndex("InventoryId");

                    b.HasIndex("PK")
                        .IsUnique()
                        .HasFilter("[PK] IS NOT NULL");

                    b.HasIndex("ShippingWarehouseId");

                    b.HasIndex("StockId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.ProductEntities.ProductItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AllocationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AllocationId1")
                        .HasColumnType("int");

                    b.Property<string>("BatchId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("BuyPricePerUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CollectProductItemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MesureId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metrial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PK")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductPackagesId")
                        .HasColumnType("int");

                    b.Property<decimal>("SellPricePerUnit")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AllocationId1");

                    b.HasIndex("CollectProductItemId");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasFilter("[Id] IS NOT NULL");

                    b.HasIndex("PK")
                        .IsUnique()
                        .HasFilter("[PK] IS NOT NULL");

                    b.HasIndex("ProductPackagesId");

                    b.ToTable("ProductItems");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.ProductEntities.ProductMesures", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MesureId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PK")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("QuantityPerUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitBuyPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitSellPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasFilter("[Id] IS NOT NULL");

                    b.HasIndex("MesureId");

                    b.HasIndex("PK")
                        .IsUnique()
                        .HasFilter("[PK] IS NOT NULL");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductMesures");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.ProductEntities.ProductPackages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PK")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PackageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductItemId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WarehouseItemId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasFilter("[Id] IS NOT NULL");

                    b.HasIndex("PK")
                        .IsUnique()
                        .HasFilter("[PK] IS NOT NULL");

                    b.HasIndex("PackageId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPackages");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.ProductEntities.SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PK")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasFilter("[Id] IS NOT NULL");

                    b.HasIndex("PK")
                        .IsUnique()
                        .HasFilter("[PK] IS NOT NULL");

                    b.ToTable("SubCategory");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.StockEntites.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AllocationWarehouseId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BatchId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("BatchQuantity")
                        .HasColumnType("decimal(8,2)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("GoodsWarehousesId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsQuanityAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PK")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ProductQuantity")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("ReorderLevel")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalUnitsQuantity")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("UnitsInInventory")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitsInOrder")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasFilter("[Id] IS NOT NULL");

                    b.HasIndex("PK")
                        .IsUnique()
                        .HasFilter("[PK] IS NOT NULL");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.StockEntites.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AllocationWarehouseId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BatchId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("BatchQuantity")
                        .HasColumnType("decimal(8,2)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsQuanityAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PK")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ProductQuantity")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("ReorderLevel")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ShippingWarehousesId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalUnitsQuantity")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("UnitsInStock")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasFilter("[Id] IS NOT NULL");

                    b.HasIndex("PK")
                        .IsUnique()
                        .HasFilter("[PK] IS NOT NULL");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.SupplyChainEntities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AllocationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderPalletId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PK")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.SupplyChainEntities.ProductVendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("BatchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PK")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VendorId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BatchId");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasFilter("[Id] IS NOT NULL");

                    b.HasIndex("PK")
                        .IsUnique()
                        .HasFilter("[PK] IS NOT NULL");

                    b.HasIndex("ProductId");

                    b.HasIndex("VendorId");

                    b.ToTable("ProductVendors");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.SupplyChainEntities.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PK")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductVendorId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.WarehouseEntites.Allocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PK")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WarehouseItemID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderID");

                    b.ToTable("Allocations");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.WarehouseEntites.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AllocationWarehouseID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoodsWarehouseID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationColum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationRow")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationShelf")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PK")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ShippingWarehouseID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WarehouseItemID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.WarehouseEntites.WarehouseItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AllocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AllocationWarehouseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BatchID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CollectItemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EmployeeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GoodsWarehouseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LocationID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PK")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductMesureId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductMesuresId")
                        .HasColumnType("int");

                    b.Property<string>("ProductPackageID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ShippingWarhouseId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AllocationId");

                    b.HasIndex("AllocationWarehouseId");

                    b.HasIndex("BatchID");

                    b.HasIndex("CollectItemId");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("GoodsWarehouseId");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasFilter("[Id] IS NOT NULL");

                    b.HasIndex("LocationID");

                    b.HasIndex("PK")
                        .IsUnique()
                        .HasFilter("[PK] IS NOT NULL");

                    b.HasIndex("ProductID");

                    b.HasIndex("ProductMesuresId");

                    b.HasIndex("ProductPackageID");

                    b.HasIndex("ShippingWarhouseId");

                    b.ToTable("WarehouseItems");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.WarehouseEntites.WarehouseTypes.AllocationWarehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BatchID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("InventoryId")
                        .HasColumnType("int");

                    b.Property<string>("LocationID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PK")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StockId")
                        .HasColumnType("int");

                    b.Property<string>("WarehouseItemID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasFilter("[Id] IS NOT NULL");

                    b.HasIndex("InventoryId");

                    b.HasIndex("PK")
                        .IsUnique()
                        .HasFilter("[PK] IS NOT NULL");

                    b.HasIndex("StockId");

                    b.ToTable("AllocationWarehouses");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.WarehouseEntites.WarehouseTypes.GoodsWarehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BatchID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("InventoryId")
                        .HasColumnType("int");

                    b.Property<string>("LocationID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PK")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WarehouseItemID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasFilter("[Id] IS NOT NULL");

                    b.HasIndex("InventoryId");

                    b.HasIndex("PK")
                        .IsUnique()
                        .HasFilter("[PK] IS NOT NULL");

                    b.ToTable("GoodsWarehouses");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.WarehouseEntites.WarehouseTypes.ShippingWarehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BatchID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LocationID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PK")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StockId")
                        .HasColumnType("int");

                    b.Property<string>("WarehouseItemID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasFilter("[Id] IS NOT NULL");

                    b.HasIndex("PK")
                        .IsUnique()
                        .HasFilter("[PK] IS NOT NULL");

                    b.HasIndex("StockId");

                    b.ToTable("ShippingWarehouses");
                });

            modelBuilder.Entity("AllocationWarehouseLocation", b =>
                {
                    b.HasOne("WarehouseSystemAnalyst.Data.Entities.WarehouseEntites.WarehouseTypes.AllocationWarehouse", null)
                        .WithMany()
                        .HasForeignKey("AllocationWarehousesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarehouseSystemAnalyst.Data.Entities.WarehouseEntites.Location", null)
                        .WithMany()
                        .HasForeignKey("LocationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GoodsWarehouseLocation", b =>
                {
                    b.HasOne("WarehouseSystemAnalyst.Data.Entities.WarehouseEntites.WarehouseTypes.GoodsWarehouse", null)
                        .WithMany()
                        .HasForeignKey("GoodsWarehousesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarehouseSystemAnalyst.Data.Entities.WarehouseEntites.Location", null)
                        .WithMany()
                        .HasForeignKey("LocationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LocationShippingWarehouse", b =>
                {
                    b.HasOne("WarehouseSystemAnalyst.Data.Entities.WarehouseEntites.Location", null)
                        .WithMany()
                        .HasForeignKey("LocationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarehouseSystemAnalyst.Data.Entities.WarehouseEntites.WarehouseTypes.ShippingWarehouse", null)
                        .WithMany()
                        .HasForeignKey("ShippingWarehousesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MesureProductItem", b =>
                {
                    b.HasOne("WarehouseSystemAnalyst.Data.Entities.ProductEntities.ProductItem", null)
                        .WithMany()
                        .HasForeignKey("ProductItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarehouseSystemAnalyst.Data.Entities.ProductEntities.Mesure", null)
                        .WithMany()
                        .HasForeignKey("UnitOfMesureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrderOrderPallet", b =>
                {
                    b.HasOne("WarehouseSystemAnalyst.Data.Entities.PalletEntities.OrderPallet", null)
                        .WithMany()
                        .HasForeignKey("OrderPalletsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarehouseSystemAnalyst.Data.Entities.SupplyChainEntities.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductProductItem", b =>
                {
                    b.HasOne("WarehouseSystemAnalyst.Data.Entities.ProductEntities.ProductItem", null)
                        .WithMany()
                        .HasForeignKey("ProductItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarehouseSystemAnalyst.Data.Entities.ProductEntities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.PalletEntities.ProductPallet", b =>
                {
                    b.HasOne("WarehouseSystemAnalyst.Data.Entities.ProductEntities.Batch", "Batch")
                        .WithMany("Pallets")
                        .HasForeignKey("BatchId")
                        .HasPrincipalKey("PK");

                    b.HasOne("WarehouseSystemAnalyst.Data.Entities.ProductEntities.Product", "Product")
                        .WithMany("Pallets")
                        .HasForeignKey("ProductId")
                        .HasPrincipalKey("PK");

                    b.Navigation("Batch");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.ProductEntities.Batch", b =>
                {
                    b.HasOne("WarehouseSystemAnalyst.Data.Entities.WarehouseEntites.WarehouseTypes.AllocationWarehouse", null)
                        .WithMany("Batches")
                        .HasForeignKey("AllocationWarehouseId");

                    b.HasOne("WarehouseSystemAnalyst.Data.Entities.WarehouseEntites.WarehouseTypes.GoodsWarehouse", null)
                        .WithMany("Batches")
                        .HasForeignKey("GoodsWarehouseId");

                    b.HasOne("WarehouseSystemAnalyst.Data.Entities.StockEntites.Inventory", "Inventory")
                        .WithMany("Batches")
                        .HasForeignKey("InventoryId")
                        .HasPrincipalKey("PK");

                    b.HasOne("WarehouseSystemAnalyst.Data.Entities.ProductEntities.Product", "Product")
                        .WithMany("Batches")
                        .HasForeignKey("ProductId")
                        .HasPrincipalKey("PK");

                    b.HasOne("WarehouseSystemAnalyst.Data.Entities.ProductEntities.ProductItem", "ProductItem")
                        .WithMany("Batches")
                        .HasForeignKey("ProductItemId")
                        .HasPrincipalKey("PK");

                    b.HasOne("WarehouseSystemAnalyst.Data.Entities.WarehouseEntites.WarehouseTypes.ShippingWarehouse", null)
                        .WithMany("Batches")
                        .HasForeignKey("ShippingWarehouseId");

                    b.HasOne("WarehouseSystemAnalyst.Data.Entities.StockEntites.Stock", "Stock")
                        .WithMany("Batches")
                        .HasForeignKey("StockId")
                        .HasPrincipalKey("PK");

                    b.Navigation("Inventory");

                    b.Navigation("Product");

                    b.Navigation("ProductItem");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.ProductEntities.Product", b =>
                {
                    b.HasOne("WarehouseSystemAnalyst.Data.Entities.WarehouseEntites.WarehouseTypes.AllocationWarehouse", null)
                        .WithMany("Products")
                        .HasForeignKey("AllocationWarehouseId");

                    b.HasOne("WarehouseSystemAnalyst.Data.Entities.ProductEntities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .HasPrincipalKey("PK");

                    b.HasOne("WarehouseSystemAnalyst.Data.Entities.MissionEntites.CollectProducts", null)
                        .WithMany("Items")
                        .HasForeignKey("CollectProductsId");

                    b.HasOne("WarehouseSystemAnalyst.Data.Entities.WarehouseEntites.WarehouseTypes.GoodsWarehouse", null)
                        .WithMany("Products")
                        .HasForeignKey("GoodsWarehouseId");

                    b.HasOne("WarehouseSystemAnalyst.Data.Entities.StockEntites.Inventory", "Inventory")
                        .WithMany("Products")
                        .HasForeignKey("InventoryId")
                        .HasPrincipalKey("PK");

                    b.HasOne("WarehouseSystemAnalyst.Data.Entities.WarehouseEntites.WarehouseTypes.ShippingWarehouse", null)
                        .WithMany("Products")
                        .HasForeignKey("ShippingWarehouseId");

                    b.HasOne("WarehouseSystemAnalyst.Data.Entities.StockEntites.Stock", "Stock")
                        .WithMany("Products")
                        .HasForeignKey("StockId")
                        .HasPrincipalKey("PK");

                    b.Navigation("Category");

                    b.Navigation("Inventory");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.ProductEntities.ProductItem", b =>
                {
                    b.HasOne("WarehouseSystemAnalyst.Data.Entities.WarehouseEntites.Allocation", "Allocation")
                        .WithMany()
                        .HasForeignKey("AllocationId1");

                    b.HasOne("WarehouseSystemAnalyst.Data.Entities.MissionEntites.CollectProductItem", null)
                        .WithMany("Items")
                        .HasForeignKey("CollectProductItemId");

                    b.HasOne("WarehouseSystemAnalyst.Data.Entities.ProductEntities.ProductPackages", null)
                        .WithMany("ProductItems")
                        .HasForeignKey("ProductPackagesId");

                    b.Navigation("Allocation");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.ProductEntities.ProductMesures", b =>
                {
                    b.HasOne("WarehouseSystemAnalyst.Data.Entities.ProductEntities.Mesure", "Mesure")
                        .WithMany("ProductMesures")
                        .HasForeignKey("MesureId")
                        .HasPrincipalKey("PK");

                    b.HasOne("WarehouseSystemAnalyst.Data.Entities.ProductEntities.Product", "Product")
                        .WithMany("Mesures")
                        .HasForeignKey("ProductId")
                        .HasPrincipalKey("PK");

                    b.Navigation("Mesure");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.ProductEntities.ProductPackages", b =>
                {
                    b.HasOne("WarehouseSystemAnalyst.Data.Entities.ProductEntities.Package", "Package")
                        .WithMany("ProductPackages")
                        .HasForeignKey("PackageId")
                        .HasPrincipalKey("PK");

                    b.HasOne("WarehouseSystemAnalyst.Data.Entities.ProductEntities.Product", "Product")
                        .WithMany("ProductPackages")
                        .HasForeignKey("ProductId")
                        .HasPrincipalKey("PK");

                    b.Navigation("Package");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.ProductEntities.SubCategory", b =>
                {
                    b.HasOne("WarehouseSystemAnalyst.Data.Entities.ProductEntities.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .HasPrincipalKey("PK");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.SupplyChainEntities.ProductVendor", b =>
                {
                    b.HasOne("WarehouseSystemAnalyst.Data.Entities.ProductEntities.Batch", "Batch")
                        .WithMany("ProductSuppliers")
                        .HasForeignKey("BatchId");

                    b.HasOne("WarehouseSystemAnalyst.Data.Entities.ProductEntities.Product", "Product")
                        .WithMany("ProductVendors")
                        .HasForeignKey("ProductId")
                        .HasPrincipalKey("PK");

                    b.HasOne("WarehouseSystemAnalyst.Data.Entities.SupplyChainEntities.Vendor", "Vendor")
                        .WithMany("ProductVendors")
                        .HasForeignKey("VendorId")
                        .HasPrincipalKey("PK");

                    b.Navigation("Batch");

                    b.Navigation("Product");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.WarehouseEntites.Allocation", b =>
                {
                    b.HasOne("WarehouseSystemAnalyst.Data.Entities.SupplyChainEntities.Order", "Order")
                        .WithMany("Allocations")
                        .HasForeignKey("OrderID")
                        .HasPrincipalKey("PK");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.WarehouseEntites.WarehouseItem", b =>
                {
                    b.HasOne("WarehouseSystemAnalyst.Data.Entities.WarehouseEntites.Allocation", "Allocation")
                        .WithMany("WarehouseItems")
                        .HasForeignKey("AllocationId")
                        .HasPrincipalKey("PK");

                    b.HasOne("WarehouseSystemAnalyst.Data.Entities.WarehouseEntites.WarehouseTypes.AllocationWarehouse", "AllocationWarehouse")
                        .WithMany("WarehouseItems")
                        .HasForeignKey("AllocationWarehouseId")
                        .HasPrincipalKey("PK");

                    b.HasOne("WarehouseSystemAnalyst.Data.Entities.ProductEntities.Batch", "Batch")
                        .WithMany("WarehouseItems")
                        .HasForeignKey("BatchID")
                        .HasPrincipalKey("PK");

                    b.HasOne("WarehouseSystemAnalyst.Data.Entities.MissionEntites.CollectItem", null)
                        .WithMany("Items")
                        .HasForeignKey("CollectItemId");

                    b.HasOne("WarehouseSystemAnalyst.Data.Entities.ContactEntities.Employee", "Employee")
                        .WithMany("WarehouseItems")
                        .HasForeignKey("EmployeeID")
                        .HasPrincipalKey("PK");

                    b.HasOne("WarehouseSystemAnalyst.Data.Entities.WarehouseEntites.WarehouseTypes.GoodsWarehouse", "GoodsWarehouse")
                        .WithMany("WarehouseItems")
                        .HasForeignKey("GoodsWarehouseId")
                        .HasPrincipalKey("PK");

                    b.HasOne("WarehouseSystemAnalyst.Data.Entities.WarehouseEntites.Location", "Location")
                        .WithMany("WarehouseItems")
                        .HasForeignKey("LocationID")
                        .HasPrincipalKey("PK");

                    b.HasOne("WarehouseSystemAnalyst.Data.Entities.ProductEntities.Product", "Product")
                        .WithMany("WarehouseItems")
                        .HasForeignKey("ProductID")
                        .HasPrincipalKey("PK");

                    b.HasOne("WarehouseSystemAnalyst.Data.Entities.ProductEntities.ProductMesures", "ProductMesures")
                        .WithMany()
                        .HasForeignKey("ProductMesuresId");

                    b.HasOne("WarehouseSystemAnalyst.Data.Entities.ProductEntities.ProductPackages", "ProductPackage")
                        .WithMany("WarehouseItems")
                        .HasForeignKey("ProductPackageID")
                        .HasPrincipalKey("PK");

                    b.HasOne("WarehouseSystemAnalyst.Data.Entities.WarehouseEntites.WarehouseTypes.ShippingWarehouse", "ShippingWarehouse")
                        .WithMany("WarehouseItems")
                        .HasForeignKey("ShippingWarhouseId")
                        .HasPrincipalKey("PK");

                    b.Navigation("Allocation");

                    b.Navigation("AllocationWarehouse");

                    b.Navigation("Batch");

                    b.Navigation("Employee");

                    b.Navigation("GoodsWarehouse");

                    b.Navigation("Location");

                    b.Navigation("Product");

                    b.Navigation("ProductMesures");

                    b.Navigation("ProductPackage");

                    b.Navigation("ShippingWarehouse");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.WarehouseEntites.WarehouseTypes.AllocationWarehouse", b =>
                {
                    b.HasOne("WarehouseSystemAnalyst.Data.Entities.StockEntites.Inventory", null)
                        .WithMany("AllocationWarehouses")
                        .HasForeignKey("InventoryId");

                    b.HasOne("WarehouseSystemAnalyst.Data.Entities.StockEntites.Stock", null)
                        .WithMany("AllocationWarehouses")
                        .HasForeignKey("StockId");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.WarehouseEntites.WarehouseTypes.GoodsWarehouse", b =>
                {
                    b.HasOne("WarehouseSystemAnalyst.Data.Entities.StockEntites.Inventory", null)
                        .WithMany("GoodsWarehouses")
                        .HasForeignKey("InventoryId");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.WarehouseEntites.WarehouseTypes.ShippingWarehouse", b =>
                {
                    b.HasOne("WarehouseSystemAnalyst.Data.Entities.StockEntites.Stock", null)
                        .WithMany("ShippingWarehouses")
                        .HasForeignKey("StockId");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.ContactEntities.Employee", b =>
                {
                    b.Navigation("WarehouseItems");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.MissionEntites.CollectItem", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.MissionEntites.CollectProductItem", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.MissionEntites.CollectProducts", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.ProductEntities.Batch", b =>
                {
                    b.Navigation("Pallets");

                    b.Navigation("ProductSuppliers");

                    b.Navigation("WarehouseItems");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.ProductEntities.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.ProductEntities.Mesure", b =>
                {
                    b.Navigation("ProductMesures");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.ProductEntities.Package", b =>
                {
                    b.Navigation("ProductPackages");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.ProductEntities.Product", b =>
                {
                    b.Navigation("Batches");

                    b.Navigation("Mesures");

                    b.Navigation("Pallets");

                    b.Navigation("ProductPackages");

                    b.Navigation("ProductVendors");

                    b.Navigation("WarehouseItems");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.ProductEntities.ProductItem", b =>
                {
                    b.Navigation("Batches");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.ProductEntities.ProductPackages", b =>
                {
                    b.Navigation("ProductItems");

                    b.Navigation("WarehouseItems");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.StockEntites.Inventory", b =>
                {
                    b.Navigation("AllocationWarehouses");

                    b.Navigation("Batches");

                    b.Navigation("GoodsWarehouses");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.StockEntites.Stock", b =>
                {
                    b.Navigation("AllocationWarehouses");

                    b.Navigation("Batches");

                    b.Navigation("Products");

                    b.Navigation("ShippingWarehouses");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.SupplyChainEntities.Order", b =>
                {
                    b.Navigation("Allocations");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.SupplyChainEntities.Vendor", b =>
                {
                    b.Navigation("ProductVendors");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.WarehouseEntites.Allocation", b =>
                {
                    b.Navigation("WarehouseItems");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.WarehouseEntites.Location", b =>
                {
                    b.Navigation("WarehouseItems");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.WarehouseEntites.WarehouseTypes.AllocationWarehouse", b =>
                {
                    b.Navigation("Batches");

                    b.Navigation("Products");

                    b.Navigation("WarehouseItems");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.WarehouseEntites.WarehouseTypes.GoodsWarehouse", b =>
                {
                    b.Navigation("Batches");

                    b.Navigation("Products");

                    b.Navigation("WarehouseItems");
                });

            modelBuilder.Entity("WarehouseSystemAnalyst.Data.Entities.WarehouseEntites.WarehouseTypes.ShippingWarehouse", b =>
                {
                    b.Navigation("Batches");

                    b.Navigation("Products");

                    b.Navigation("WarehouseItems");
                });
#pragma warning restore 612, 618
        }
    }
}
